package gui;

import java.io.*;
import java.awt.Font;
import javax.swing.*;

import analysis.*;

/*
 * CPhos.java
 * 
 * Version 1.0.5 (Jan 21, 2013)
 *
 * Created on Jun 21, 2010, 5:11:06 PM
 * 
 * Program run via GUI
 * Program also supports command line. Run as:
 * java -Djava.awt.headless=true -jar CPhos.jar [input filename] [output directory name] [summary output directory name] [input species database filename] [reference species database filename]
 * note: [output directory name] and [summary output directory name] should not contain spaces and refers to the directory where outputs from sequence alignment will be saved
 */

/**
 * @author Boyang Zhao
 */
public class CPhos extends javax.swing.JFrame {

    /** Creates new form CPhos */
    public CPhos() {
        Utilities.updateSettings();
        initialize();
        initComponents();
        setLocationRelativeTo(null);
        resetSession();
    }

    private void resetSession(){
        peptideSeqText.setText(null);
        enabledMainPanel(true);
        progressPanel.setVisible(false);
        cancelButton.setEnabled(true);
        viewResultsButton.setEnabled(false);
        resultsView = null;
        overallProgressBar.setValue(0);
        overallProgressBar.setStringPainted(false);
        overallProgressBar.setString(null);
        taskProgressBar.setStringPainted(false);
        taskProgressBar.setString(null);
        taskProgressBar.setValue(0);
        this.setSize(this.getWidth(), 300);
        overviewLabel1.setFont(defaultfontPlain);
        overviewLabel2.setFont(defaultfontPlain);
        overviewLabel3.setFont(defaultfontPlain);
        overviewLabel4.setFont(defaultfontPlain);
        resultsMenuItem.setEnabled(false);
        runtimestatMenuItem.setEnabled(false);
    }

    private void enabledMainPanel(boolean setting){
        submitButton.setEnabled(setting);
        peptideSeqText.setEnabled(setting);
        speciesComboBox.setEnabled(setting);
        dbComboBox.setEnabled(setting);
    }

    private void sendToAnalysis(){
        progressPanel.setVisible(true);
        pack();

        int db1index = speciesComboBox.getSelectedIndex();
        int db2index = dbComboBox.getSelectedIndex();
        String speciespath = Analysis.db_species.get(db1index);
        String dbpath = Analysis.db_target.get(db2index);
        analysis = new Analysis(speciespath, dbpath, this, true);

        String[] inputArray = peptideSeqText.getText().split("\\s+");
        for (int i = 0; i < inputArray.length; i++)
            analysis.peptideInputs.add(inputArray[i].toUpperCase());

        analysis.analyzePeptides();
        if(!analysis.analyzeStatus){
            overallProgressBar.setStringPainted(true);
            overallProgressBar.setString("Error");
            taskProgressBar.setStringPainted(true);
            taskProgressBar.setString("Error");
        } else {
            overallProgressBar.setStringPainted(true);
            overallProgressBar.setString("Complete");
            taskProgressBar.setStringPainted(true);
            taskProgressBar.setString("Complete");
        }
        
        resultsMenuItem.setEnabled(true);
        runtimestatMenuItem.setEnabled(true);
        cancelButton.setEnabled(false);
        viewResultsButton.setEnabled(true);
    }
    
    private void viewResults(){
        if(resultsView == null){
            resultsView = new resultsFrame(analysis);
            resultsView.setLocationRelativeTo(this);
        }
        resultsView.setVisible(true);
    }

    private void initialize(){
        //change theme
        try{
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        } catch(UnsupportedLookAndFeelException e) {
        } catch(ClassNotFoundException e) {
        } catch(InstantiationException e) {
        } catch(IllegalAccessException e) {
        }

        //initialize variables
        dbspeciesListing = new String[Analysis.db_species.size()];
        dbtargetListing = new String[Analysis.db_target.size()];

        for(int i = 0; i<dbspeciesListing.length; i++){
            dbspeciesListing[i] = Utilities.getDBName(Analysis.db_species.get(i), true);
        }
        for(int i = 0; i<dbtargetListing.length; i++){
            dbtargetListing[i] = Utilities.getDBName(Analysis.db_target.get(i), true);
        }

        defaultfontBold = new Font("Arial", Font.BOLD, 11);
        defaultfontPlain = new Font("Arial", Font.PLAIN, 11);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        parametersPanel = new javax.swing.JPanel();
        speciesLabel = new javax.swing.JLabel();
        speciesComboBox = new javax.swing.JComboBox(dbspeciesListing);
        dbLabel = new javax.swing.JLabel();
        dbComboBox = new javax.swing.JComboBox(dbtargetListing);
        inputPanel = new javax.swing.JPanel();
        inputLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        peptideSeqText = new javax.swing.JTextArea();
        submitButton = new javax.swing.JButton();
        progressPanel = new javax.swing.JPanel();
        progressiPanel = new javax.swing.JPanel();
        taskProgressBar = new javax.swing.JProgressBar();
        progressTaskLabel = new javax.swing.JLabel();
        overallProgressBar = new javax.swing.JProgressBar();
        overvalLabel = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        javax.swing.JLabel progressOverviewLabel = new javax.swing.JLabel();
        overviewLabel1 = new javax.swing.JLabel();
        overviewLabel2 = new javax.swing.JLabel();
        overviewLabel3 = new javax.swing.JLabel();
        overviewLabel4 = new javax.swing.JLabel();
        cancelButton = new javax.swing.JButton();
        viewResultsButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newSessionMenuItem = new javax.swing.JMenuItem();
        importinputMenuItem = new javax.swing.JMenuItem();
        saveinputMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        resultsMenuItem = new javax.swing.JMenuItem();
        runtimestatMenuItem = new javax.swing.JMenuItem();
        toolsMenu = new javax.swing.JMenu();
        updateDBMenuItem = new javax.swing.JMenuItem();
        preferencesMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        documentationMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CPhos");
        setIconImage(new ImageIcon(getClass().getResource("/resources/NHLBI.jpg")).getImage());

        mainPanel.setPreferredSize(new java.awt.Dimension(672, 240));

        parametersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Parameters"));

        speciesLabel.setText("Species (for phosphopeptides):");

        dbLabel.setText("Species to Search Against:");

        javax.swing.GroupLayout parametersPanelLayout = new javax.swing.GroupLayout(parametersPanel);
        parametersPanel.setLayout(parametersPanelLayout);
        parametersPanelLayout.setHorizontalGroup(
            parametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(parametersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(speciesLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(speciesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(dbLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dbComboBox, 0, 182, Short.MAX_VALUE)
                .addContainerGap())
        );
        parametersPanelLayout.setVerticalGroup(
            parametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(parametersPanelLayout.createSequentialGroup()
                .addGroup(parametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(speciesLabel)
                    .addComponent(speciesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dbLabel)
                    .addComponent(dbComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        inputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Input"));

        inputLabel.setText("Input Phosphopeptides (delimiter: space, line break, or tab)");

        peptideSeqText.setColumns(20);
        peptideSeqText.setRows(4);
        jScrollPane1.setViewportView(peptideSeqText);

        submitButton.setText("Determine Conserved Phosphosites");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout inputPanelLayout = new javax.swing.GroupLayout(inputPanel);
        inputPanel.setLayout(inputPanelLayout);
        inputPanelLayout.setHorizontalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 644, Short.MAX_VALUE)
                    .addComponent(inputLabel)
                    .addComponent(submitButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        inputPanelLayout.setVerticalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputPanelLayout.createSequentialGroup()
                .addComponent(inputLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(submitButton))
        );

        progressiPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Progress"));

        progressTaskLabel.setText("Task 1 of 4: ");

        overvalLabel.setText("Overall");

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        progressOverviewLabel.setText("Overview");

        overviewLabel1.setText("Generate Protein Database");

        overviewLabel2.setText("Generate Ortholog Database");

        overviewLabel3.setText("Perform Sequence Alignment");

        overviewLabel4.setText("Calculate Conservation Scores");

        javax.swing.GroupLayout progressiPanelLayout = new javax.swing.GroupLayout(progressiPanel);
        progressiPanel.setLayout(progressiPanelLayout);
        progressiPanelLayout.setHorizontalGroup(
            progressiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(progressiPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(progressiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(progressTaskLabel)
                    .addComponent(taskProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
                    .addComponent(overvalLabel)
                    .addComponent(overallProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 139, Short.MAX_VALUE)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(progressiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(progressiPanelLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(progressiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(overviewLabel2)
                            .addComponent(overviewLabel1)
                            .addComponent(overviewLabel3)
                            .addComponent(overviewLabel4)))
                    .addComponent(progressOverviewLabel))
                .addContainerGap())
        );
        progressiPanelLayout.setVerticalGroup(
            progressiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, progressiPanelLayout.createSequentialGroup()
                .addGroup(progressiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, progressiPanelLayout.createSequentialGroup()
                        .addComponent(progressTaskLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(taskProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(overvalLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(overallProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, progressiPanelLayout.createSequentialGroup()
                        .addComponent(progressOverviewLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(overviewLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(overviewLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(overviewLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(overviewLabel4)))
                .addContainerGap())
        );

        cancelButton.setText("Cancel Analysis");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        viewResultsButton.setText("View Results");
        viewResultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewResultsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout progressPanelLayout = new javax.swing.GroupLayout(progressPanel);
        progressPanel.setLayout(progressPanelLayout);
        progressPanelLayout.setHorizontalGroup(
            progressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(progressPanelLayout.createSequentialGroup()
                .addContainerGap(461, Short.MAX_VALUE)
                .addComponent(cancelButton)
                .addGap(5, 5, 5)
                .addComponent(viewResultsButton)
                .addContainerGap())
            .addComponent(progressiPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        progressPanelLayout.setVerticalGroup(
            progressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(progressPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(progressiPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addGroup(progressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(viewResultsButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(progressPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(parametersPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(inputPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(parametersPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        fileMenu.setText("File");

        newSessionMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newSessionMenuItem.setText("Start New Session");
        newSessionMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newSessionMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newSessionMenuItem);

        importinputMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        importinputMenuItem.setText("Import Input From File...");
        importinputMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importinputMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(importinputMenuItem);

        saveinputMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveinputMenuItem.setText("Save Input...");
        saveinputMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveinputMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveinputMenuItem);
        fileMenu.add(jSeparator1);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        viewMenu.setText("View");

        resultsMenuItem.setText("Results");
        resultsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultsMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(resultsMenuItem);

        runtimestatMenuItem.setText("Runtime Statistics");
        runtimestatMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runtimestatMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(runtimestatMenuItem);

        menuBar.add(viewMenu);

        toolsMenu.setText("Tools");

        updateDBMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.CTRL_MASK));
        updateDBMenuItem.setText("Update/Add Local Databases");
        updateDBMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateDBMenuItemActionPerformed(evt);
            }
        });
        toolsMenu.add(updateDBMenuItem);

        preferencesMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        preferencesMenuItem.setText("Preferences");
        preferencesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preferencesMenuItemActionPerformed(evt);
            }
        });
        toolsMenu.add(preferencesMenuItem);

        menuBar.add(toolsMenu);

        helpMenu.setText("Help");

        documentationMenuItem.setText("Documentation");
        documentationMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                documentationMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(documentationMenuItem);

        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 696, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        enabledMainPanel(false);
        analysisThread = new Thread(){
            @Override
            public void run(){
                sendToAnalysis();
            }
        };

        analysisThread.start();
    }//GEN-LAST:event_submitButtonActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        if(aboutBox == null){
            aboutBox = new aboutDialog(this);
            aboutBox.setLocationRelativeTo(this);
        }
        aboutBox.setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        dispose();
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void preferencesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preferencesMenuItemActionPerformed
        prefBox = new preferencesDialog(this);
        prefBox.setLocationRelativeTo(this);
        prefBox.setVisible(true);
    }//GEN-LAST:event_preferencesMenuItemActionPerformed

    private void newSessionMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newSessionMenuItemActionPerformed
        resetSession();
    }//GEN-LAST:event_newSessionMenuItemActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        //TODO not working
        analysisThread.interrupt();
        cancelButton.setEnabled(false);
        viewResultsButton.setEnabled(true);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void documentationMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_documentationMenuItemActionPerformed
        Utilities.openDocument("http://helixweb.nih.gov/CPhos/", this);
    }//GEN-LAST:event_documentationMenuItemActionPerformed

    private void viewResultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewResultsButtonActionPerformed
        viewResults();
    }//GEN-LAST:event_viewResultsButtonActionPerformed

    private void updateDBMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateDBMenuItemActionPerformed
        databaseBox = new databaseDialog(this);
        databaseBox.setLocationRelativeTo(this);
        databaseBox.setVisible(true);
    }//GEN-LAST:event_updateDBMenuItemActionPerformed

    private void saveinputMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveinputMenuItemActionPerformed
        String extError = "The file format was not recognized!";
        String inputFilePath = Utilities.saveFile(this, "./input.txt");
        FileWriter f = null;
        try {
            f = new FileWriter(inputFilePath);
            f.write(peptideSeqText.getText());
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
        } finally {
            try {
                if (f != null)
                    f.close();
            } catch(IOException e){}
        }
    }//GEN-LAST:event_saveinputMenuItemActionPerformed

    private void importinputMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importinputMenuItemActionPerformed
        String extError = "The file format was not recognized!";
        String inputFilePath = Utilities.selectFile("", extError, this);
        peptideSeqText.setText(Utilities.readFile(inputFilePath));
    }//GEN-LAST:event_importinputMenuItemActionPerformed

    private void resultsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultsMenuItemActionPerformed
        viewResults();
    }//GEN-LAST:event_resultsMenuItemActionPerformed

    private void runtimestatMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runtimestatMenuItemActionPerformed
        String msg = Utilities.getRuntimeStats(analysis.runningTime);
        JOptionPane.showMessageDialog(this, msg, "Runtime Statistics", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_runtimestatMenuItemActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        if(args.length < 1){
            //start GUI
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new CPhos().setVisible(true);
                }
            });
        } else {
            if(args.length != 5){
                System.out.println("Incorrect arguments. Require the following: [input filename] [output directory] [summary output directory name] [input species database filename] [reference species database filename]");
            } else {
                //start command line based
                //java -Djava.awt.headless=true -jar CPhos.jar [input filename] [output directory name] [summary output directory name] [input species database filename] [reference species database filename]
                
                if(args[1].contains(" ")){
                    System.out.println("Output directory name should not contain spaces. Program exiting.");
                    return;
                }
                
                try{
                    Utilities.submitAnalysisNoDisplay(args[0], args[1], args[2], Integer.valueOf(args[3]), Integer.valueOf(args[4]));
                } catch(java.awt.HeadlessException e){
                    System.out.println("Caught java.awt.Headless Exception. Program exiting.");
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox dbComboBox;
    private javax.swing.JLabel dbLabel;
    private javax.swing.JMenuItem documentationMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem importinputMenuItem;
    private javax.swing.JLabel inputLabel;
    private javax.swing.JPanel inputPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newSessionMenuItem;
    public static javax.swing.JProgressBar overallProgressBar;
    private javax.swing.JLabel overvalLabel;
    public static javax.swing.JLabel overviewLabel1;
    public static javax.swing.JLabel overviewLabel2;
    public static javax.swing.JLabel overviewLabel3;
    public static javax.swing.JLabel overviewLabel4;
    private javax.swing.JPanel parametersPanel;
    private javax.swing.JTextArea peptideSeqText;
    private javax.swing.JMenuItem preferencesMenuItem;
    private javax.swing.JPanel progressPanel;
    public static javax.swing.JLabel progressTaskLabel;
    private javax.swing.JPanel progressiPanel;
    private javax.swing.JMenuItem resultsMenuItem;
    private javax.swing.JMenuItem runtimestatMenuItem;
    private javax.swing.JMenuItem saveinputMenuItem;
    private javax.swing.JComboBox speciesComboBox;
    private javax.swing.JLabel speciesLabel;
    private javax.swing.JButton submitButton;
    public static javax.swing.JProgressBar taskProgressBar;
    private javax.swing.JMenu toolsMenu;
    private javax.swing.JMenuItem updateDBMenuItem;
    private javax.swing.JMenu viewMenu;
    private javax.swing.JButton viewResultsButton;
    // End of variables declaration//GEN-END:variables

    private String[] dbtargetListing;
    private String[] dbspeciesListing;
    private aboutDialog aboutBox;
    private preferencesDialog prefBox;
    private databaseDialog databaseBox;
    private resultsFrame resultsView;
    private Analysis analysis;
    private Thread analysisThread;

    public static Font defaultfontBold;
    public static Font defaultfontPlain;
}
