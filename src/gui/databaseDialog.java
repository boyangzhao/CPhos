/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * databaseDialog.java
 *
 * Created on Jun 30, 2010, 3:53:39 PM
 */

package gui;

import java.io.*;
import java.util.ArrayList;
import java.util.Properties;

import analysis.*;

/**
 *
 * @author zhaob3
 */
public class databaseDialog extends javax.swing.JDialog {

    /** Creates new form databaseDialog */
    public databaseDialog(java.awt.Frame parent) {
        super(parent);
        populateDBListing();
        initComponents();
        postinit();
    }

    private void populateDBListingHelper(ArrayList<String> arraydb, ArrayList<String[]> DBlistingt, ArrayList<String> wsListingt){
        for (int i = 0; i < arraydb.size(); i++) {
            if(!arraydb.get(i).startsWith("homologene.")){
                if(arraydb.get(i).endsWith(".sdb")){
                    String[] tmp = new String[2];
                    tmp[0] = Utilities.getDBName(arraydb.get(i), true);
                    tmp[1] = Utilities.getDBBuild(arraydb.get(i));
                    DBlistingt.add(tmp);
                } else if(arraydb.get(i).endsWith(".ws")){
                    wsListingt.add(Utilities.getDBName(arraydb.get(i), true));
                }
            }
        }
    }

    private void populateDBListing() {
        DBListingt = new ArrayList<String[]>();
        wsListingt = new ArrayList<String>();
        populateDBListingHelper(Analysis.db_species, DBListingt, wsListingt);
        populateDBListingHelper(Analysis.db_target, DBListingt, wsListingt);

        DBListing = new String[DBListingt.size()];
        for(int i = 0; i<DBListingt.size(); i++)
            DBListing[i] = DBListingt.get(i)[0];

        wsListing = new String[wsListingt.size()];
        for(int i = 0; i<wsListingt.size(); i++)
            wsListing[i] = wsListingt.get(i);
    }

    private void postinit(){
        uaBrowseSDBDirTextField.setText(Analysis.dbFolderPath);
        uaBrowseSDBDirTextField.setEnabled(false);
        uaBrowseSDBDirButton.setEnabled(false);
        defaultDirRadioButton.setSelected(true);
        uDBSelectComboBox.setEnabled(false);
        aDBNameTextField.setEnabled(false);
        defaultDirRadioButton.setActionCommand("default");
        customDirRadioButton.setActionCommand("custom");
        udbRadioButton.setActionCommand("update");
        adbRadioButton.setActionCommand("add");
        uDBSelectComboBox.setSelectedIndex(-1);
        String hbuildnum = Integer.toString(Utilities.gethDBBuildNum());
        uahdbbuildLabel.setText(uahdbbuildLabel.getText().replace("-",hbuildnum));
        hhdbbuildLabel.setText(hhdbbuildLabel.getText().replace("-",hbuildnum));
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DBDirButtonGroup = new javax.swing.ButtonGroup();
        uaButtonGroup = new javax.swing.ButtonGroup();
        updateaddTabbedPanel = new javax.swing.JTabbedPane();
        protDBPanel = new javax.swing.JPanel();
        aDBNameLabel = new javax.swing.JLabel();
        aBrowseDBDirLabel = new javax.swing.JLabel();
        uaBrowseDBDirTextField = new javax.swing.JTextField();
        uaBrowseDBDirButton = new javax.swing.JButton();
        uaDBButton = new javax.swing.JButton();
        aDBNameTextField = new javax.swing.JTextField();
        aBrowseSDBDirLabel = new javax.swing.JLabel();
        uaBrowseSDBDirTextField = new javax.swing.JTextField();
        uaBrowseSDBDirButton = new javax.swing.JButton();
        defaultDirRadioButton = new javax.swing.JRadioButton();
        customDirRadioButton = new javax.swing.JRadioButton();
        uahdbbuildLabel = new javax.swing.JLabel();
        udbRadioButton = new javax.swing.JRadioButton();
        uDBSelectLabel = new javax.swing.JLabel();
        uDBSelectComboBox = new javax.swing.JComboBox(DBListing);
        uBuildLabel = new javax.swing.JLabel();
        adbRadioButton = new javax.swing.JRadioButton();
        uaSeparator = new javax.swing.JSeparator();
        wsPanel = new javax.swing.JPanel();
        noteTextPanel = new javax.swing.JTextPane();
        wsTextField = new javax.swing.JTextField();
        wsAddButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        wsComboBox = new javax.swing.JComboBox(wsListing);
        wsRemoveButton = new javax.swing.JButton();
        hgDBPanel = new javax.swing.JPanel();
        updateDBButton = new javax.swing.JButton();
        hBrowseDBDirButton = new javax.swing.JButton();
        hBrowseDBDirLabel = new javax.swing.JLabel();
        hBrowseDBDirTextField = new javax.swing.JTextField();
        hhdbbuildLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        hBuildTextField = new javax.swing.JTextField();
        dbProgressBar = new javax.swing.JProgressBar();
        noteTextPanel1 = new javax.swing.JTextPane();

        DBDirButtonGroup.add(defaultDirRadioButton);
        DBDirButtonGroup.add(customDirRadioButton);

        uaButtonGroup.add(udbRadioButton);
        uaButtonGroup.add(adbRadioButton);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Update/Add Local Databases");

        aDBNameLabel.setText("Database name:");

        aBrowseDBDirLabel.setText("Select location of downloaded database (.fasta extensions only):");

        uaBrowseDBDirButton.setText("Browse");
        uaBrowseDBDirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uaBrowseDBDirButtonActionPerformed(evt);
            }
        });

        uaDBButton.setText("Update/Add");
        uaDBButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uaDBButtonActionPerformed(evt);
            }
        });

        aBrowseSDBDirLabel.setText("Select destination location of serialized database (.sdb extension) to be created:");

        uaBrowseSDBDirButton.setText("Browse");
        uaBrowseSDBDirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uaBrowseSDBDirButtonActionPerformed(evt);
            }
        });

        defaultDirRadioButton.setText("default directory");
        defaultDirRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultDirRadioButtonActionPerformed(evt);
            }
        });

        customDirRadioButton.setText("custom directory");
        customDirRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customDirRadioButtonActionPerformed(evt);
            }
        });

        uahdbbuildLabel.setText("The protein databases are created by merging with HomoloGene database release version: -");

        udbRadioButton.setText("Update Database");
        udbRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                udbRadioButtonActionPerformed(evt);
            }
        });

        uDBSelectLabel.setText("Select database:");

        uDBSelectComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uDBSelectComboBoxActionPerformed(evt);
            }
        });

        uBuildLabel.setText("Version (modified date of original .fasta file): -");

        adbRadioButton.setText("Add Database");
        adbRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adbRadioButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout protDBPanelLayout = new javax.swing.GroupLayout(protDBPanel);
        protDBPanel.setLayout(protDBPanelLayout);
        protDBPanelLayout.setHorizontalGroup(
            protDBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(protDBPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(protDBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(uahdbbuildLabel)
                    .addGroup(protDBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(aBrowseDBDirLabel)
                        .addGroup(protDBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(aBrowseSDBDirLabel)
                            .addGroup(protDBPanelLayout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addGroup(protDBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(protDBPanelLayout.createSequentialGroup()
                                        .addGap(4, 4, 4)
                                        .addComponent(uaBrowseSDBDirTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(uaBrowseSDBDirButton))
                                    .addGroup(protDBPanelLayout.createSequentialGroup()
                                        .addComponent(defaultDirRadioButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(customDirRadioButton))))
                            .addGroup(protDBPanelLayout.createSequentialGroup()
                                .addGroup(protDBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, protDBPanelLayout.createSequentialGroup()
                                        .addGap(44, 44, 44)
                                        .addComponent(aDBNameLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(aDBNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, protDBPanelLayout.createSequentialGroup()
                                        .addGap(29, 29, 29)
                                        .addGroup(protDBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(uaBrowseDBDirTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, protDBPanelLayout.createSequentialGroup()
                                                .addGap(14, 14, 14)
                                                .addGroup(protDBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(uBuildLabel)
                                                    .addGroup(protDBPanelLayout.createSequentialGroup()
                                                        .addComponent(uDBSelectLabel)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(uDBSelectComboBox, 0, 160, Short.MAX_VALUE)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGap(10, 10, 10)
                                .addComponent(uaBrowseDBDirButton))))
                    .addComponent(udbRadioButton)
                    .addComponent(adbRadioButton))
                .addGap(18, 18, 18))
            .addGroup(protDBPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(uaSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(protDBPanelLayout.createSequentialGroup()
                .addGap(202, 202, 202)
                .addComponent(uaDBButton)
                .addContainerGap(214, Short.MAX_VALUE))
        );
        protDBPanelLayout.setVerticalGroup(
            protDBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(protDBPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(uahdbbuildLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(udbRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(protDBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(uDBSelectLabel)
                    .addComponent(uDBSelectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(uBuildLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(protDBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(protDBPanelLayout.createSequentialGroup()
                        .addComponent(adbRadioButton)
                        .addGap(20, 20, 20))
                    .addGroup(protDBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(aDBNameLabel)
                        .addComponent(aDBNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(uaSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(aBrowseDBDirLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(protDBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(uaBrowseDBDirTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(uaBrowseDBDirButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(aBrowseSDBDirLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(protDBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customDirRadioButton)
                    .addComponent(defaultDirRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(protDBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(uaBrowseSDBDirTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(uaBrowseSDBDirButton))
                .addGap(14, 14, 14)
                .addComponent(uaDBButton)
                .addContainerGap())
        );

        updateaddTabbedPanel.addTab("Local Protein Databases", protDBPanel);

        noteTextPanel.setBorder(null);
        noteTextPanel.setText("This program will be using the NCBI E-Utilities to query the database. In order to have a match term that the program can use to select specific groups of species (e.g. mammals), please enter the taxonomy name");
        noteTextPanel.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        noteTextPanel.setEnabled(false);

        wsAddButton.setText("Add");
        wsAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wsAddButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("To remove a web service, select the web service from below and click \"Remove\"");

        wsRemoveButton.setText("Remove");
        wsRemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wsRemoveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout wsPanelLayout = new javax.swing.GroupLayout(wsPanel);
        wsPanel.setLayout(wsPanelLayout);
        wsPanelLayout.setHorizontalGroup(
            wsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(wsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(wsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(wsPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(wsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(wsAddButton))
                    .addComponent(noteTextPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE)
                    .addComponent(jLabel2)
                    .addGroup(wsPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(wsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(wsRemoveButton)))
                .addContainerGap())
        );
        wsPanelLayout.setVerticalGroup(
            wsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(wsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(noteTextPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(wsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wsAddButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(wsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(wsRemoveButton)
                    .addComponent(wsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(150, Short.MAX_VALUE))
        );

        updateaddTabbedPanel.addTab("Protein Web Services", wsPanel);

        updateDBButton.setText("Update");
        updateDBButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateDBButtonActionPerformed(evt);
            }
        });

        hBrowseDBDirButton.setText("Browse");
        hBrowseDBDirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hBrowseDBDirButtonActionPerformed(evt);
            }
        });

        hBrowseDBDirLabel.setText("Select location of newer version of the database (homologene.data):");

        hhdbbuildLabel.setText("Current release version of HomoloGene Database on local disk is: -");

        jLabel1.setText("Build Version:");

        javax.swing.GroupLayout hgDBPanelLayout = new javax.swing.GroupLayout(hgDBPanel);
        hgDBPanel.setLayout(hgDBPanelLayout);
        hgDBPanelLayout.setHorizontalGroup(
            hgDBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hgDBPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(hgDBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hhdbbuildLabel)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE)
                    .addComponent(hBrowseDBDirLabel))
                .addContainerGap())
            .addGroup(hgDBPanelLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(hBrowseDBDirTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hBrowseDBDirButton)
                .addGap(21, 21, 21))
            .addGroup(hgDBPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hBuildTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(352, Short.MAX_VALUE))
            .addGroup(hgDBPanelLayout.createSequentialGroup()
                .addGap(211, 211, 211)
                .addComponent(updateDBButton)
                .addContainerGap(229, Short.MAX_VALUE))
        );
        hgDBPanelLayout.setVerticalGroup(
            hgDBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, hgDBPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(hhdbbuildLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hBrowseDBDirLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(hgDBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hBrowseDBDirTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hBrowseDBDirButton))
                .addGap(18, 18, 18)
                .addGroup(hgDBPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(hBuildTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(updateDBButton)
                .addGap(148, 148, 148))
        );

        updateaddTabbedPanel.addTab("Local HomoloGene Database", hgDBPanel);

        noteTextPanel1.setBorder(null);
        noteTextPanel1.setText("Note: For local databases, this program does not use the raw database from NCBI directly. You have to use this interface to serialize the databases (to .sdb file) for optimization purposes. Only databases made into .sdb will be used by this program for analyses.");
        noteTextPanel1.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(dbProgressBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(updateaddTabbedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(noteTextPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(noteTextPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(updateaddTabbedPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dbProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void hBrowseDBDirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hBrowseDBDirButtonActionPerformed
        String extError = "The database you downloaded have to be in .data format!";
        String dbFilePath = Utilities.selectFile(".data", extError, this);
        if(!dbFilePath.isEmpty())
            hBrowseDBDirTextField.setText(dbFilePath);
    }//GEN-LAST:event_hBrowseDBDirButtonActionPerformed

    private void updateDBButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateDBButtonActionPerformed
        final String hdbFilePath = hBrowseDBDirTextField.getText();
        if(!hdbFilePath.endsWith(".data"))
            Utilities.displayMessage("Please check your database you selected. This should be homologene.data from NCBI FTP.", this);
        else {
            final Integer hdbDBBuild = Integer.parseInt(hBuildTextField.getText());
            if(hdbFilePath.isEmpty() || hBuildTextField.getText().isEmpty())
                Utilities.displayMessage("Please fill in both fields above before continue.", this);
            else {
                dbProgressBar.setStringPainted(false);
                dbProgressBar.setString("running...");
                dbProgressBar.setValue(0);
                updateDBButton.setEnabled(false);

                final java.awt.Window window = this;
                new Thread() {
                    @Override
                    public void run() {
                        if(!Utilities.serializeDB(hdbFilePath,hdbDBBuild,dbProgressBar))
                            Utilities.displayMessage("An error occurred while serializing database. Please try again.", window);

                        Utilities.displayMessage("Database has been serialized. Please restart program to see the changes.", window);
                        updateDBButton.setEnabled(true);

                        //signal garabage collect
                        System.gc();
                    }
                }.start();
            }
        }
    }//GEN-LAST:event_updateDBButtonActionPerformed

    private void uaBrowseDBDirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uaBrowseDBDirButtonActionPerformed
        String extError = "The database you downloaded have to be in FASTA format (.fasta extension)!";
        String dbFilePath = Utilities.selectFile(".fasta", extError, this);
        if(!dbFilePath.isEmpty())
            uaBrowseDBDirTextField.setText(dbFilePath);
    }//GEN-LAST:event_uaBrowseDBDirButtonActionPerformed

    private void uaDBButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uaDBButtonActionPerformed
        //TODO also save to settings
        final String dbFilePath = uaBrowseDBDirTextField.getText();
        if(!dbFilePath.endsWith(".fasta"))
            Utilities.displayMessage("The input database has to be in FASTA format! Please try again.", this);
        else {
            final String destFolderPath = uaBrowseSDBDirTextField.getText();
            String dbDBNamea = "";
            if(adbRadioButton.isSelected())
                dbDBNamea = aDBNameTextField.getText();
            else if(udbRadioButton.isSelected()){
                dbDBNamea = (String) uDBSelectComboBox.getSelectedItem();
                dbDBNamea = dbDBNamea.substring(0, dbDBNamea.indexOf("[refseq]")-1);
            } else
                Utilities.displayMessage("Please select whether to add or update database and try again.", this);

            final String dbDBName = dbDBNamea;

            dbProgressBar.setStringPainted(false);
            dbProgressBar.setString("running...");
            dbProgressBar.setValue(0);
            uaDBButton.setEnabled(false);

            final java.awt.Window window = this;
            new Thread() {
                @Override
                public void run() {
                    if (!Utilities.serializeDB(dbFilePath, dbDBName, destFolderPath, dbProgressBar))
                        Utilities.displayMessage("An error occurred while serializing database. Please try again.", window);

                    Utilities.displayMessage("Database has been serialized. Please restart program to see the changes.", window);
                    uaDBButton.setEnabled(true);
                    
                    //signal garabage collect
                    System.gc();
                }
            }.start();
        }
    }//GEN-LAST:event_uaDBButtonActionPerformed

    private void uaBrowseSDBDirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uaBrowseSDBDirButtonActionPerformed
        String dbFilePath = Utilities.selectFolder(this);
        if(!dbFilePath.isEmpty())
            uaBrowseSDBDirTextField.setText(dbFilePath);
    }//GEN-LAST:event_uaBrowseSDBDirButtonActionPerformed

    private void defaultDirRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultDirRadioButtonActionPerformed
        if(evt.getActionCommand().equals("default")){
            uaBrowseSDBDirTextField.setText(Analysis.dbFolderPath);
            uaBrowseSDBDirTextField.setEnabled(false);
            uaBrowseSDBDirButton.setEnabled(false);
        }
    }//GEN-LAST:event_defaultDirRadioButtonActionPerformed

    private void customDirRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customDirRadioButtonActionPerformed
         if(evt.getActionCommand().equals("custom")){
             uaBrowseSDBDirTextField.setText("");
             uaBrowseSDBDirTextField.setEnabled(true);
             uaBrowseSDBDirButton.setEnabled(true);
             String msg = "Note: You can change the directory where the serialized database (.sdb) is created, but during analyses the program";
             msg += "\nonly looks for .sdb files in the default database directory. You can change the default database directory under";
             msg += "\nPreferences or you have to move the newly created .sdb file to this default location.";
             Utilities.displayMessage(msg, this);
         }
    }//GEN-LAST:event_customDirRadioButtonActionPerformed

    private void uDBSelectComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uDBSelectComboBoxActionPerformed
        if(uDBSelectComboBox.getSelectedIndex() > -1)
            uBuildLabel.setText("Version (modified date of original .fasta file): "+DBListingt.get(uDBSelectComboBox.getSelectedIndex())[1]);
        else
            uBuildLabel.setText("Version (modified date of original .fasta file): -");
    }//GEN-LAST:event_uDBSelectComboBoxActionPerformed

    private void udbRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_udbRadioButtonActionPerformed
        if(evt.getActionCommand().equals("update")){
             uDBSelectComboBox.setEnabled(true);
             aDBNameTextField.setEnabled(false);
             uaDBButton.setText("Update Database");
         }
    }//GEN-LAST:event_udbRadioButtonActionPerformed

    private void adbRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adbRadioButtonActionPerformed
        if(evt.getActionCommand().equals("add")){
             uDBSelectComboBox.setEnabled(false);
             aDBNameTextField.setEnabled(true);
             uaDBButton.setText("Add New Database");
        }
    }//GEN-LAST:event_adbRadioButtonActionPerformed

    private void wsAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wsAddButtonActionPerformed
        Properties p = null;
        try {
            p = new Properties();
            p.load(new FileInputStream("settings.ini"));
            String targetdb = p.getProperty("database.target");

            Utilities.writeToSettings("database.species",targetdb+"||"+wsTextField.getText().toLowerCase().replace(' ', '_')+"_[refseq_web_service].ws");
            Utilities.displayMessage("Settings have been saved. Please restart program to see the changes.", this);
        } catch(Exception e){}
        
    }//GEN-LAST:event_wsAddButtonActionPerformed

    private void wsRemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wsRemoveButtonActionPerformed
        Properties p = null;
        try {
            p = new Properties();
            p.load(new FileInputStream("settings.ini"));
            String targetdb = p.getProperty("database.target");
            String tmp = wsComboBox.getSelectedItem().toString();
            tmp = tmp.substring(0,tmp.indexOf(" [refseq web service]"));
            String toberemoveddb = Utilities.createDBFileName(tmp);
            String targetdbNew = "";

            String[] targetdbs = targetdb.split("\\|\\|");
            for(int i = 0; i<targetdbs.length; i++){
                if(!toberemoveddb.equals(targetdbs[i])){
                    targetdbNew = (i==0) ? targetdbs[i] : targetdbNew+"||"+targetdbs[i];
                }
            }
            
            Utilities.writeToSettings("database.species",targetdbNew);
            Utilities.displayMessage("Settings have been saved. Please restart program to see the changes.", this);
        } catch(Exception e){}
    }//GEN-LAST:event_wsRemoveButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup DBDirButtonGroup;
    private javax.swing.JLabel aBrowseDBDirLabel;
    private javax.swing.JLabel aBrowseSDBDirLabel;
    private javax.swing.JLabel aDBNameLabel;
    private javax.swing.JTextField aDBNameTextField;
    private javax.swing.JRadioButton adbRadioButton;
    private javax.swing.JRadioButton customDirRadioButton;
    private javax.swing.JProgressBar dbProgressBar;
    private javax.swing.JRadioButton defaultDirRadioButton;
    private javax.swing.JButton hBrowseDBDirButton;
    private javax.swing.JLabel hBrowseDBDirLabel;
    private javax.swing.JTextField hBrowseDBDirTextField;
    private javax.swing.JTextField hBuildTextField;
    private javax.swing.JPanel hgDBPanel;
    private javax.swing.JLabel hhdbbuildLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextPane noteTextPanel;
    private javax.swing.JTextPane noteTextPanel1;
    private javax.swing.JPanel protDBPanel;
    private javax.swing.JLabel uBuildLabel;
    private javax.swing.JComboBox uDBSelectComboBox;
    private javax.swing.JLabel uDBSelectLabel;
    private javax.swing.JButton uaBrowseDBDirButton;
    private javax.swing.JTextField uaBrowseDBDirTextField;
    private javax.swing.JButton uaBrowseSDBDirButton;
    private javax.swing.JTextField uaBrowseSDBDirTextField;
    private javax.swing.ButtonGroup uaButtonGroup;
    private javax.swing.JButton uaDBButton;
    private javax.swing.JSeparator uaSeparator;
    private javax.swing.JLabel uahdbbuildLabel;
    private javax.swing.JRadioButton udbRadioButton;
    private javax.swing.JButton updateDBButton;
    private javax.swing.JTabbedPane updateaddTabbedPanel;
    private javax.swing.JButton wsAddButton;
    private javax.swing.JComboBox wsComboBox;
    private javax.swing.JPanel wsPanel;
    private javax.swing.JButton wsRemoveButton;
    private javax.swing.JTextField wsTextField;
    // End of variables declaration//GEN-END:variables
    private String[] DBListing;
    private ArrayList<String[]> DBListingt;
    private String[] wsListing;
    private ArrayList<String> wsListingt;
}
